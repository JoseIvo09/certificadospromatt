import { O as OutputOptions } from '../generate-C_H8d9WH.mjs';
import { Message } from '../message.mjs';
import { JSONSchema } from '@genkit-ai/core';
import { Registry } from '@genkit-ai/core/registry';
import { MessageData } from '../model.mjs';
import { Formatter } from './types.d.mjs';
import { GenerateResponseChunk } from '../generate/chunk.mjs';
import '../document.mjs';
import '../generate/response.mjs';

declare function defineFormat(registry: Registry, options: {
    name: string;
} & Formatter['config'], handler: Formatter['handler']): {
    config: {
        contentType?: string | undefined;
        format?: string | undefined;
        schema?: Record<string, any> | undefined;
        constrained?: boolean | undefined;
        instructions?: string | undefined;
    };
    handler: (schema?: any) => {
        parseMessage(message: Message<unknown>): unknown;
        parseChunk?: ((chunk: GenerateResponseChunk<unknown>, cursor?: any) => unknown) | undefined;
        instructions?: string | undefined;
    };
};
type FormatArgument = keyof typeof DEFAULT_FORMATS | Omit<string, keyof typeof DEFAULT_FORMATS> | undefined | null;
declare function resolveFormat(registry: Registry, outputOpts: OutputOptions | undefined): Promise<Formatter<any, any> | undefined>;
declare function resolveInstructions(format?: Formatter, schema?: JSONSchema, instructionsOption?: boolean | string): string | undefined;
declare function injectInstructions(messages: MessageData[], instructions: string | boolean | undefined): MessageData[];
declare const DEFAULT_FORMATS: Formatter<any, any>[];
/**
 * configureFormats registers the default built-in formats on a registry.
 */
declare function configureFormats(registry: Registry): void;

export { DEFAULT_FORMATS, type FormatArgument, configureFormats, defineFormat, injectInstructions, resolveFormat, resolveInstructions };
